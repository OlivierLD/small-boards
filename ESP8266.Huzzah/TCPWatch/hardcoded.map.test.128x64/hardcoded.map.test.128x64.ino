/**
   Hard coded map test.
   Draw a map on a SSD1306 128x64

   @author Olivier LeDiouris

   Keywords: SSD1306, Dynamic Arrays, Kewl Stuff!
*/
// Graphical primitives doc at https://learn.adafruit.com/adafruit-gfx-graphics-library/graphics-primitives
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define ROT_0   0
#define ROT_90  1
#define ROT_180 2
#define ROT_270 3

#define NULL 0
// #define DEBUG // Uncomment for more Serial output.

#define POS_LIST_MAX_LENGTH 200

typedef struct POS {
  struct POS * next;
  float lat;
  float lng;
} Pos;

/* Chain Lists Utils */
typedef struct SMALL {
  struct SMALL * next;
} StrPt;

void chainAppend (StrPt * head, StrPt * pt) {
  StrPt * structPt = head;

  while (structPt->next) {
    structPt = structPt->next;
  }
  structPt->next = pt;
}

void freeChain (StrPt * head) {
  StrPt * nextOne;
  StrPt * thisOne;

  thisOne = head;
  while (thisOne) {
    nextOne = thisOne->next;
    free((char *)thisOne);
    thisOne = nextOne;
  }
}

#define walkList(a,b) for (b=a;b;b=b->next)

void chainRemove (StrPt * head, StrPt * pt) {
  StrPt * locPt;
  walkList(head, locPt) {
    if (locPt->next == pt) {
      locPt->next = pt->next;
      break;
    }
  }
}

StrPt * dropHead (StrPt * head) {
  if (head != NULL) {
    if (head->next != NULL) {
      StrPt * newHead = head->next;
      free((char*)head);
      return newHead;
    }
  }
  return NULL;
}

int listLength(StrPt * head) {
  int len = 0;
  StrPt * locPt;
  walkList(head, locPt) {
    len += 1;
  }
  return len;
}

float positions[][2] = {
  { -9.107533, -140.208600 },
  { -9.107583, -140.208650 },
  { -9.107583, -140.208650 },
  { -9.107633, -140.208683 },
  { -9.107667, -140.208733 },
  { -9.107667, -140.208733 },
  { -9.107700, -140.208767 },
  { -9.107700, -140.208767 },
  { -9.107733, -140.208817 },
  { -9.107783, -140.208867 },
  { -9.107817, -140.208900 },
  { -9.107833, -140.208917 },
  { -9.107867, -140.208967 },
  { -9.107900, -140.209000 },
  { -9.107917, -140.209000 },
  { -9.107950, -140.209033 },
  { -9.107967, -140.209050 },
  { -9.108050, -140.209117 },
  { -9.108050, -140.209133 },
  { -9.108083, -140.209167 },
  { -9.108100, -140.209183 },
  { -9.108150, -140.209200 },
  { -9.108183, -140.209217 },
  { -9.108200, -140.209233 },
  { -9.108233, -140.209267 },
  { -9.108250, -140.209267 },
  { -9.108300, -140.209300 },
  { -9.108367, -140.209333 },
  { -9.108383, -140.209350 },
  { -9.108417, -140.209383 },
  { -9.108417, -140.209383 },
  { -9.108500, -140.209433 },
  { -9.108517, -140.209450 },
  { -9.108533, -140.209450 },
  { -9.108550, -140.209467 },
  { -9.108567, -140.209483 },
  { -9.108600, -140.209550 },
  { -9.108633, -140.209583 },
  { -9.108650, -140.209600 },
  { -9.108667, -140.209633 },
  { -9.108683, -140.209650 },
  { -9.108717, -140.209717 },
  { -9.108750, -140.209750 },
  { -9.108767, -140.209767 },
  { -9.108800, -140.209783 },
  { -9.108817, -140.209800 },
  { -9.108850, -140.209850 },
  { -9.108883, -140.209883 },
  { -9.108900, -140.209900 },
  { -9.108933, -140.209933 },
  { -9.108950, -140.209967 },
  { -9.108983, -140.210000 },
  { -9.109000, -140.210000 },
  { -9.109033, -140.210050 },
  { -9.109083, -140.210083 },
  { -9.109083, -140.210100 },
  { -9.109117, -140.210117 },
  { -9.109133, -140.210117 },
  { -9.109167, -140.210150 },
  { -9.109200, -140.210167 },
  { -9.109217, -140.210183 },
  { -9.109267, -140.210217 },
  { -9.109283, -140.210233 },
  { -9.109317, -140.210283 },
  { -9.109350, -140.210300 },
  { -9.109367, -140.210333 },
  { -9.109400, -140.210333 },
  { -9.109417, -140.210350 },
  { -9.109467, -140.210383 },
  { -9.109500, -140.210417 },
  { -9.109517, -140.210450 },
  { -9.109550, -140.210483 },
  { -9.109567, -140.210483 },
  { -9.109600, -140.210533 },
  { -9.109633, -140.210583 },
  { -9.109650, -140.210600 },
  { -9.109683, -140.210633 },
  { -9.109700, -140.210650 },
  { -9.109733, -140.210683 },
  { -9.109750, -140.210700 },
  { -9.109767, -140.210717 },
  { -9.109800, -140.210750 },
  { -9.109817, -140.210767 },
  { -9.109883, -140.210817 },
  { -9.109917, -140.210850 },
  { -9.109933, -140.210867 },
  { -9.109950, -140.210883 },
  { -9.109983, -140.210883 },
  { -9.110033, -140.210933 },
  { -9.110033, -140.210933 },
  { -9.110100, -140.210983 },
  { -9.110133, -140.211017 },
  { -9.110150, -140.211050 },
  { -9.110200, -140.211083 },
  { -9.110233, -140.211100 },
  { -9.110250, -140.211133 },
  { -9.110283, -140.211167 },
  { -9.110300, -140.211167 },
  { -9.110333, -140.211200 },
  { -9.110350, -140.211250 },
  { -9.110367, -140.211267 },
  { -9.110400, -140.211300 },
  { -9.110417, -140.211317 },
  { -9.110450, -140.211367 },
  { -9.110467, -140.211383 },
  { -9.110483, -140.211400 },
  { -9.110517, -140.211417 },
  { -9.110517, -140.211417 },
  { -9.110567, -140.211467 },
  { -9.110600, -140.211500 },
  { -9.110617, -140.211517 },
  { -9.110650, -140.211550 },
  { -9.110667, -140.211567 },
  { -9.110717, -140.211617 },
  { -9.110733, -140.211633 },
  { -9.110767, -140.211650 },
  { -9.110800, -140.211683 },
  { -9.110817, -140.211700 },
  { -9.110867, -140.211733 },
  { -9.110900, -140.211750 },
  { -9.110917, -140.211767 },
  { -9.110950, -140.211800 },
  { -9.110967, -140.211817 },
  { -9.111017, -140.211867 },
  { -9.111033, -140.211883 },
  { -9.111050, -140.211900 },
  { -9.111067, -140.211933 },
  { -9.111083, -140.211950 },
  { -9.111133, -140.212033 },
  { -9.111167, -140.212067 },
  { -9.111183, -140.212083 },
  { -9.111200, -140.212100 },
  { -9.111217, -140.212117 },
  { -9.111250, -140.212183 },
  { -9.111283, -140.212200 },
  { -9.111300, -140.212217 },
  { -9.111317, -140.212233 },
  { -9.111333, -140.212250 },
  { -9.111383, -140.212283 },
  { -9.111400, -140.212317 },
  { -9.111417, -140.212333 },
  { -9.111450, -140.212350 },
  { -9.111467, -140.212367 },
  { -9.111533, -140.212400 },
  { -9.111567, -140.212433 },
  { -9.111583, -140.212450 },
  { -9.111617, -140.212467 },
  { -9.111633, -140.212483 },
  { -9.111667, -140.212517 },
  { -9.111683, -140.212533 },
  { -9.111733, -140.212550 },
  { -9.111750, -140.212583 },
  { -9.111767, -140.212600 },
  { -9.111783, -140.212617 },
  { -9.111800, -140.212633 },
  { -9.111833, -140.212667 },
  { -9.111883, -140.212700 },
  { -9.111900, -140.212717 },
  { -9.111933, -140.212750 },
  { -9.111950, -140.212767 },
  { -9.111983, -140.212817 },
  { -9.112017, -140.212850 },
  { -9.112050, -140.212867 },
  { -9.112083, -140.212900 },
  { -9.112100, -140.212917 },
  { -9.112133, -140.212950 },
  { -9.112150, -140.212983 },
  { -9.112167, -140.212983 },
  { -9.112200, -140.213017 },
  { -9.112217, -140.213050 },
  { -9.112267, -140.213100 },
  { -9.112300, -140.213133 },
  { -9.112317, -140.213150 },
  { -9.112350, -140.213183 },
  { -9.112367, -140.213200 },
  { -9.112400, -140.213233 },
  { -9.112433, -140.213250 },
  { -9.112450, -140.213267 },
  { -9.112483, -140.213283 },
  { -9.112500, -140.213300 },
  { -9.112550, -140.213350 },
  { -9.112583, -140.213383 },
  { -9.112600, -140.213400 },
  { -9.112633, -140.213433 },
  { -9.112650, -140.213450 },
  { -9.112700, -140.213483 },
  { -9.112717, -140.213500 },
  { -9.112750, -140.213517 },
  { -9.112783, -140.213550 },
  { -9.112800, -140.213567 },
  { -9.112850, -140.213617 },
  { -9.112883, -140.213650 },
  { -9.112883, -140.213667 },
  { -9.112917, -140.213717 },
  { -9.112967, -140.213733 },
  { -9.113000, -140.213767 },
  { -9.113017, -140.213783 },
  { -9.113033, -140.213800 },
  { -9.113050, -140.213817 },
  { -9.113100, -140.213867 },
  { -9.113133, -140.213900 },
  { -9.113150, -140.213917 },
  { -9.113183, -140.213933 },
  { -9.113200, -140.213950 },
  { -9.113250, -140.214000 },
  { -9.113283, -140.214033 },
  { -9.113300, -140.214033 },
  { -9.113333, -140.214067 },
  { -9.113350, -140.214067 },
  { -9.113400, -140.214133 },
  { -9.113400, -140.214133 },
  { -9.113467, -140.214167 },
  { -9.113500, -140.214200 },
  { -9.113533, -140.214217 },
  { -9.113567, -140.214250 },
  { -9.113600, -140.214283 },
  { -9.113617, -140.214300 },
  { -9.113633, -140.214333 },
  { -9.113633, -140.214350 },
  { -9.113683, -140.214417 },
  { -9.113717, -140.214450 },
  { -9.113733, -140.214467 },
  { -9.113767, -140.214500 },
  { -9.113783, -140.214517 },
  { -9.113833, -140.214567 },
  { -9.113883, -140.214600 },
  { -9.113900, -140.214617 },
  { -9.113933, -140.214650 },
  { -9.113950, -140.214667 },
  { -9.114000, -140.214717 },
  { -9.114017, -140.214733 },
  { -9.114033, -140.214767 },
  { -9.114083, -140.214800 },
  { -9.114100, -140.214800 },
  { -9.114150, -140.214850 },
  { -9.114183, -140.214867 },
  { -9.114200, -140.214883 },
  { -9.114233, -140.214917 },
  { -9.114233, -140.214917 },
  { -9.114300, -140.214967 },
  { -9.114333, -140.215000 },
  { -9.114350, -140.215000 },
  { -9.114383, -140.215033 },
  { -9.114400, -140.215033 },
  { -9.114450, -140.215067 },
  { -9.114500, -140.215117 },
  { -9.114517, -140.215133 },
  { -9.114550, -140.215167 },
  { -9.114550, -140.215167 },
  { -9.114600, -140.215200 },
  { -9.114633, -140.215217 },
  { -9.114650, -140.215233 },
  { -9.114683, -140.215283 },
  { -9.114717, -140.215300 },
  { -9.114767, -140.215350 },
  { -9.114800, -140.215367 },
  { -9.114817, -140.215383 },
  { -9.114867, -140.215400 },
  { -9.114883, -140.215400 },
  { -9.114933, -140.215467 },
  { -9.114967, -140.215500 },
  { -9.114983, -140.215517 },
  { -9.115033, -140.215550 },
  { -9.115050, -140.215567 },
  { -9.115083, -140.215600 },
  { -9.115100, -140.215650 },
  { -9.115117, -140.215667 },
  { -9.115150, -140.215717 },
  { -9.115183, -140.215733 },
  { -9.115233, -140.215800 },
  { -9.115267, -140.215833 },
  { -9.115267, -140.215850 },
  { -9.115300, -140.215883 },
  { -9.115317, -140.215900 },
  { -9.115350, -140.215967 },
  { -9.115383, -140.216000 },
  { -9.115417, -140.216067 },
  { -9.115433, -140.216067 },
  { -9.115467, -140.216100 },
  { -9.115483, -140.216133 },
  { -9.115500, -140.216150 },
  { -9.115533, -140.216167 },
  { -9.115533, -140.216183 },
  { -9.115567, -140.216217 },
  { -9.115600, -140.216233 },
  { -9.115600, -140.216267 },
  { -9.115650, -140.216283 },
  { -9.115667, -140.216300 },
  { -9.115700, -140.216333 },
  { -9.115733, -140.216333 },
  { -9.115767, -140.216350 },
  { -9.115800, -140.216367 },
  { -9.115850, -140.216400 },
  { -9.115883, -140.216417 },
  { -9.115933, -140.216450 },
  { -9.115950, -140.216467 },
  { -9.116000, -140.216500 },
  { -9.116017, -140.216517 },
  { -9.116050, -140.216550 },
  { -9.116067, -140.216583 },
  { -9.116100, -140.216617 },
  { -9.116133, -140.216633 }
};

const int NB_POS = 302;
int posIndex = 0;

const int BETWEEN_LOOPS = 500; // in milli-sec.

const int SSD1306_WIDTH = 128;
const int SSD1306_HEIGHT = 64;
const int SSD1306_I2C_ADDR = 0x3D; // for 128x64

Adafruit_SSD1306 ssd1306 = Adafruit_SSD1306(SSD1306_WIDTH, SSD1306_HEIGHT, &Wire);

float prevLat = -1000,
      prevLng = -1000;

Pos * posListHead = NULL;

int screenIndex = -1;

void repaint() {
  ssd1306.clearDisplay();

  ssd1306.setTextColor(WHITE);
  ssd1306.setTextSize(1);

  char dataBuffer[128];

  // Draw a map
  ssd1306.drawRect(0, 0, ssd1306.width(), ssd1306.height(), WHITE);
  // Draw data here.
  if (posListHead != NULL) {
    // 1 - Obtain boundaries
    float minLat = 1000, maxLat = -1000, minLng = 1000, maxLng = -1000;
    Pos * it;
    walkList(posListHead, it) {
      minLat = min(it->lat, minLat);
      maxLat = max(it->lat, maxLat);
      minLng = min(it->lng, minLng);
      maxLng = max(it->lng, maxLng);
    }
    // 2 - Now plot
    float deltaLat = maxLat - minLat;
    float deltaLng = maxLng - minLng;
#ifdef DEBUG
    sprintf(dataBuffer, "lat in [%f..%f], lng in [%f..%f]", minLat, maxLat, minLng, maxLng);
    Serial.println(dataBuffer);
#endif
    float distCoeff = min( ((float)ssd1306.width()) / deltaLng, ((float)ssd1306.height()) / deltaLat) * 0.8; // 0.8, not to hit the borders
    // Square projection for now...
    int prevX = -1, prevY = -1;
    walkList(posListHead, it) {
      float graphLng = it->lng - minLng;
      float fromCenterLng = graphLng - (deltaLng / 2);
      int x = round(((float)ssd1306.width() / 2) + (fromCenterLng * distCoeff));
      float graphLat = it->lat - minLat;
      float fromCenterLat = graphLat - (deltaLat / 2);
      int y = round(((float)ssd1306.height() / 2) - (fromCenterLat * distCoeff));
      if (prevX == -1 && prevY == -1) {
        ssd1306.drawPixel(x, y, WHITE);
      } else {
        ssd1306.drawLine(prevX, prevY, x, y, WHITE);
      }
      prevX = x;
      prevY = y;
    }
    // Plot last point
    if (prevX != -1 && prevY != -1) {
      ssd1306.fillCircle(prevX, prevY, 2, WHITE);
    }
  }

  ssd1306.setCursor(0, 0);
  ssd1306.display();
}

void setup() {
  ssd1306.begin(SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDR);
  // initialize display
  ssd1306.setRotation(ROT_90);
  ssd1306.display();
  delay(1000);
  ssd1306.clearDisplay();
  ssd1306.display();

  Serial.begin(115200); // Console output
  delay(100);

  int count = 0;
  char dataBuffer[128];

  // A banner
  ssd1306.setTextSize(2);
  ssd1306.setTextWrap(true);
  ssd1306.setTextColor(WHITE);
  ssd1306.setCursor(0, 0);
  ssd1306.println("TCP");
  ssd1306.println("Watch");
  ssd1306.setTextSize(1);
  ssd1306.println("by OlivSoft");
  ssd1306.setCursor(0, 0);
  ssd1306.display(); // actually display all of the above

  delay(1000); // Wait, to read the banner
}

unsigned long lastDisplay = 0;

void loop() {
  unsigned long time = millis();
  if (time - lastDisplay > BETWEEN_LOOPS) {

    // Read new pos
    float lat = 0, lng = 0;

    if (posIndex < NB_POS) {
      float * pos = positions[posIndex];
      lat = pos[0];
      lng = pos[1];
      posIndex += 1;
    }

    char dataBuffer[128];
    if (lat != 0 && lng != 0) {
      sprintf(dataBuffer, "LAT=%f, LNG=%f", lat, lng);
    } else {
      sprintf(dataBuffer, "Data exhausted");
    }
    Serial.println(dataBuffer);

    // New position? (for the map)
    if (lat != 0 || lng != 0) {
      if (posListHead == NULL) {
        posListHead = (Pos *) calloc(1, sizeof(Pos));
        posListHead->next = NULL;
        posListHead->lat = lat;
        posListHead->lng = lng;
      } else {
        Pos * newPos = (Pos *) calloc(1, sizeof(Pos));
        newPos->next = NULL;
        newPos->lat = lat;
        newPos->lng = lng;
        chainAppend((StrPt *)posListHead, (StrPt *)newPos);
      }
      prevLat = lat;
      prevLng = lng;
      // Trim list if needed
      while (listLength((StrPt *)posListHead) > POS_LIST_MAX_LENGTH) {
        posListHead = (Pos *)dropHead((StrPt *)posListHead);
      }
    }
    lastDisplay = millis();
  }
  repaint(); // Display data on screen
}

